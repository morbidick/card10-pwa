{"version":3,"file":"app.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/bluetooth/utils.ts","../src/bluetooth/characteristics.ts","../src/bluetooth/index.ts","../src/utils.ts","../src/face.ts","../src/app.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","export const rainbowArray = new Uint8Array([\n\t0xff,\n\t0x00,\n\t0x00,\n\t0xff,\n\t0x8b,\n\t0x00,\n\t0xe8,\n\t0xff,\n\t0x00,\n\t0x5d,\n\t0xff,\n\t0x00,\n\t0x00,\n\t0xff,\n\t0x2e,\n\t0x00,\n\t0xff,\n\t0xb9,\n\t0x00,\n\t0xb9,\n\t0xff,\n\t0x00,\n\t0x2e,\n\t0xff,\n\t0x5d,\n\t0x00,\n\t0xff,\n\t0xe8,\n\t0x00,\n\t0xff,\n\t0xff,\n\t0x00,\n\t0x8b,\n])\n\nexport const currentTimeAsBigEndian = () => {\n\tconst data = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])\n\tconst utcTime = Date.now() + new Date().getTimezoneOffset() * 60000\n\tconst hexTime = utcTime.toString(16)\n\n\tlet sourceI = hexTime.length - 1\n\tlet targetI = data.length - 1\n\twhile (sourceI >= 0) {\n\t\tdata[targetI] = parseInt(\n\t\t\t`${hexTime[sourceI - 1] || 0}${hexTime[sourceI]}`,\n\t\t\t16\n\t\t)\n\t\ttargetI = targetI - 1\n\t\tsourceI = sourceI - 2\n\t}\n\treturn data\n}\n","import { rgbColor } from '../utils'\nimport { rainbowArray, currentTimeAsBigEndian } from './utils'\nexport const rgbCharacteristic = (\n\tservice: BluetoothRemoteGATTService,\n\tuuid: string\n) => {\n\tlet char: BluetoothRemoteGATTCharacteristic\n\treturn {\n\t\tread: async (): Promise<rgbColor> => {\n\t\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\t\tconst data = await char.readValue()\n\t\t\treturn {\n\t\t\t\tred: data.getUint8(0),\n\t\t\t\tgreen: data.getUint8(1),\n\t\t\t\tblue: data.getUint8(2),\n\t\t\t}\n\t\t},\n\t\twrite: async ({ red, green, blue }: rgbColor) => {\n\t\t\tconst data = new Uint8Array(3)\n\t\t\tdata[0] = red\n\t\t\tdata[1] = green\n\t\t\tdata[2] = blue\n\t\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\t\treturn char.writeValue(data)\n\t\t},\n\t}\n}\n\nexport const rgbArrayCharacteristic = (\n\tservice: BluetoothRemoteGATTService,\n\tuuid: string,\n\tlength: number\n) => {\n\tlet char: BluetoothRemoteGATTCharacteristic\n\tconst write = async (colors: rgbColor[]) => {\n\t\tconst data = new Uint8Array(length * 3)\n\n\t\tcolors.forEach(({ red, green, blue }, i) => {\n\t\t\tconst offset = i * 3\n\t\t\tdata[offset + 0] = red\n\t\t\tdata[offset + 1] = green\n\t\t\tdata[offset + 2] = blue\n\t\t})\n\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\treturn char.writeValue(data)\n\t}\n\n\treturn {\n\t\tread: async () => {\n\t\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\t\treturn new Uint8Array((await char.readValue()).buffer)\n\t\t},\n\t\twrite,\n\t\tsameColor: async (c: rgbColor) => {\n\t\t\treturn write(new Array(length).fill(c))\n\t\t},\n\t\trainbow: async () => {\n\t\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\t\treturn char.writeValue(rainbowArray)\n\t\t},\n\t}\n}\n\nexport const numberCharacteristic = (\n\tservice: BluetoothRemoteGATTService,\n\tuuid: string\n) => {\n\tlet char: BluetoothRemoteGATTCharacteristic\n\treturn {\n\t\twrite: async (time: number) => {\n\t\t\tconst data = new Uint16Array(1)\n\t\t\tdata[0] = time\n\t\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\t\treturn char.writeValue(data)\n\t\t},\n\t}\n}\n\nexport const timeCharacteristic = (\n\tservice: BluetoothRemoteGATTService,\n\tuuid: string\n) => {\n\tlet char: BluetoothRemoteGATTCharacteristic\n\treturn {\n\t\tnow: async () => {\n\t\t\tchar = char || (await service.getCharacteristic(uuid))\n\t\t\treturn char.writeValue(currentTimeAsBigEndian())\n\t\t},\n\t}\n}\n","import {\n\tnumberCharacteristic,\n\trgbCharacteristic,\n\trgbArrayCharacteristic,\n\ttimeCharacteristic,\n} from './characteristics'\n\nconst serviceUUID = '42230200-2342-2342-2342-234223422342'\n\nexport class Card10 {\n\tconstructor(private service: BluetoothRemoteGATTService) {}\n\n\tvibrate = numberCharacteristic(\n\t\tthis.service,\n\t\t'4223020f-2342-2342-2342-234223422342'\n\t).write\n\tbottomLeftLed = rgbCharacteristic(\n\t\tthis.service,\n\t\t'42230211-2342-2342-2342-234223422342'\n\t)\n\tbottomRightLed = rgbCharacteristic(\n\t\tthis.service,\n\t\t'42230212-2342-2342-2342-234223422342'\n\t)\n\ttopLeftLed = rgbCharacteristic(\n\t\tthis.service,\n\t\t'42230214-2342-2342-2342-234223422342'\n\t)\n\ttopRightLed = rgbCharacteristic(\n\t\tthis.service,\n\t\t'42230213-2342-2342-2342-234223422342'\n\t)\n\tclock = timeCharacteristic(\n\t\tthis.service,\n\t\t'42230201-2342-2342-2342-234223422342'\n\t)\n\t/* seems unsopprted until now ledStrip = rgbArrayCharacteristic(\n\t\tthis.service,\n\t\t'42230220-2342-2342-2342-234223422342',\n\t\t11\n\t) */\n}\n\nexport async function connect(onDisconnect = () => {}) {\n\tconsole.log('Requesting Bluetooth Device...')\n\tconst device = await navigator.bluetooth.requestDevice({\n\t\tfilters: [{ services: [serviceUUID] }, { namePrefix: 'card10' }],\n\t\toptionalServices: [serviceUUID, 'battery_service'],\n\t})\n\n\tconsole.log('Connected to:' + device.name)\n\n\tdevice.addEventListener('gattserverdisconnected', onDisconnect)\n\n\tconsole.log('Connecting to GATT Server...')\n\tif (!device.gatt) {\n\t\tthrow Error('no gatt server available')\n\t}\n\tconst server = await device.gatt.connect()\n\n\tconsole.log('Getting Service...')\n\tconst service = await server.getPrimaryService(serviceUUID)\n\n\tconst card10 = new Card10(service)\n\n\tawait card10.vibrate(100)\n\t//await card10.ledStrip.rainbow()\n\tconsole.log('BT initialized')\n\n\treturn card10\n}\n\nexport const supported = !!navigator.bluetooth\n","export type rgbColor = {\n\tred: number\n\tgreen: number\n\tblue: number\n}\n\n// thanks https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nexport function rgbToHex({ red, green, blue }: rgbColor): string {\n\treturn (\n\t\t'#' +\n\t\t((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)\n\t)\n}\nexport function hexToRgb(hex: string): rgbColor {\n\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n\treturn result\n\t\t? {\n\t\t\t\tred: parseInt(result[1], 16),\n\t\t\t\tgreen: parseInt(result[2], 16),\n\t\t\t\tblue: parseInt(result[3], 16),\n\t\t  }\n\t\t: { red: 0, green: 0, blue: 0 }\n}\n\nexport type InputEvent = {\n\ttarget: {\n\t\tvalue: string\n\t}\n}\n","import { svg, html } from 'lit-element'\n\nexport const card10Face = ({\n\tscreen = html``,\n\ttopLeftLed = html``,\n\ttopRightLed = html``,\n\tbottomLeftLed = html``,\n\tbottomRightLed = html``,\n\tvibrationMotor = html``,\n}) => svg`\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 504 444\">\n\t\t<rect width=\"500\" height=\"400\" x=\"2\" y=\"22\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" ry=\"20\"/>\n\t\t<path fill=\"currentColor\" transform=\"translate(2 30)\" d=\"M24.2 89.3l-.1.2V90.2l-.3 1.7c-.2 1.4-.5 3.5-1 5.7-.7 4.5-2 9.8-3.2 12.4-2.4 5-6.4 8.5-9.7 11.7a21.6 21.6 0 00-4 4.8 6.9 6.9 0 00-.5 6c2.5 6.4 9 9.2 15.6 11.2s13.5 3.5 17.6 6.4c12.3 8.8 11.9 21.7 5.8 29.3-3.4 4.3-11.4 7.2-19.5 7.3-8.1.2-16-2.2-19.5-7a18.9 18.9 0 01-2.7-5.1v6.3l.3.4c4.4 6.2 13.2 8.6 22 8.4 8.6-.2 17.3-3 21.7-8.5 7-8.9 7-23.9-6.4-33.5-5-3.5-12-4.8-18.4-6.8-6.4-2-11.8-4.5-13.8-9.5-.5-1.3-.4-2.2.3-3.4.6-1.3 2-2.6 3.5-4.2 3.2-3.1 7.6-6.9 10.3-12.5 1.4-2.8 2.2-7 3-11a94 94 0 002.3 10.8c1 3.3 3 6.1 6.1 9.7 3.1 3.5 7.5 8 13.7 14.7 19.6 21.4 22.3 56.8 19.2 88.8a315 315 0 01-7.8 44.6 59.3 59.3 0 00-33.1-9.8c-8.4 0-16 1.3-22.9 3.7v3a66.7 66.7 0 0122.9-3.7c12.4 0 23.3 3.5 32.3 9.6-2.3 8.9-4.6 17.2-5.6 20.1a1.5 1.5 0 102.8 1c1-2.9 3.2-11 5.3-19.2a58.6 58.6 0 0118.9 25.9c8 21 6.2 48.8-9.2 77.4 2-18.5 1.7-36.4-2-50-2-7.6-5-14-9.5-18.3a20 20 0 00-17-5.6c-4.4.5-7.5 4.2-9.6 9.3-2.1 5-3.5 11.9-4.4 19.7-1.3 10.3-2 22.4-2.5 34.4-1.3-11-2.8-21.5-4.7-30.7-3-14.5-6.5-25.7-11-31.1a1.5 1.5 0 10-2.2 1.8c3.6 4.4 7.4 15.6 10.3 29.8 3 14.3 5.2 31.7 6.6 49.1a1.5 1.5 0 003 0c1-17.8 1.4-37.5 3.4-53 1-7.6 2.3-14.3 4.2-19 2-4.6 4.3-7 7.2-7.4 6.1-.8 10.8 1 14.7 4.8 3.8 3.7 6.8 9.6 8.8 17 4 14.8 4 35.3 1 56.1a1.5 1.5 0 002.8 1c19-31.5 21.7-62.8 12.8-86.4a61.4 61.4 0 00-20.7-27.8c3.1-12.6 6.4-28.2 8.1-46 3.1-32.4.7-68.7-20-91.1-6.2-6.8-10.6-11.2-13.6-14.7-3-3.4-4.6-5.8-5.5-8.6A94.2 94.2 0 0127 89.8v-.4l-2.8-.1zm-21.5 56v3.6a5 5 0 011 2.2c.6 3 0 5.7-1 8.2v8.3l.6-2c1.6-4.2 4.5-8.8 3.2-15-.4-2.5-1.9-4.5-3.8-5.4zM27.5 277h-3.4c-7.3.6-15.3 3.1-21.4 8v5.1a34.9 34.9 0 0032.8 4c4.2-1.9 7.2-5 7.1-8.6 0-1.7-.7-3.1-1.8-4.3-1.1-1.1-2.6-2-4.3-2.6-2.5-1-5.6-1.5-9-1.6zm0 3c3.1 0 5.9.5 8 1.3 1.4.5 2.5 1.2 3.2 2 .6.7 1 1.4 1 2.3 0 2-1.8 4.2-5.4 5.9A32 32 0 014 287.8a36.6 36.6 0 0120.2-7.7h3.2z\"/>\n\t\t<path fill=\"currentColor\" transform=\"translate(24 30)\" d=\"M455.4 10.6a1.3 1.3 0 00-1.2 2c4.4 8.7 7.8 18.8 9.6 30.4-29.4 18.4-42 50.7-41.1 92.8.3 14.8 2.3 30.8 5.8 48-25 34.8-28.3 71.1-21.6 106.3a1.3 1.3 0 002.1.8c13.1-10 26-23.1 37.7-42.6 4.7 13.6 10 27.6 16 42a1.3 1.3 0 002.5 0l9.5-26.3v-8l-10.8 30c-23.7-58-37.6-109.2-38.5-150.3-1-41 11-71.7 38.8-89.7 1.4 10.5 1.5 22.2 0 35-9.9-.1-19.5 4-24.1 10.1a1.3 1.3 0 102.1 1.6c3.8-5 12.7-9 21.7-9l-.5 4.2a1.3 1.3 0 00-.1.5c-1 7-2.6 14.3-4.6 22l-.7 3.3c-6.5-1.4-12.2-4-16-7.2a1.3 1.3 0 00-.8-.4 1.3 1.3 0 00-.9 2.4 39.8 39.8 0 0017 7.8l-1 6.2a1.4 1.4 0 00-.2 1 140.5 140.5 0 004.3 57.3 35 35 0 00-11.2 12.7 1.3 1.3 0 102.3 1.3 32 32 0 019.7-11.3c2.3 8.2 4.8 14.3 6 16.6a1.3 1.3 0 002.3-1.2 137 137 0 01-9.4-31 138.4 138.4 0 01-1.4-43.2c5.8.4 11.1.5 16-1V121a39.6 39.6 0 01-15.6 1 108 108 0 012.2-10.8c2-7.5 3.4-14.5 4.5-21.4 3.3.2 6.3.9 8.9 1.9v-2.9a31 31 0 00-8.5-1.6l.5-4.2a1.3 1.3 0 00.1-.6c1.5-12.8 1.5-24.5.3-35 2.7 2.3 5.2 4.7 7.6 7.2v-3.9c-2.6-2.5-5.2-5-8.2-7.4-1.8-12.1-5.2-22.7-9.9-31.8a1.3 1.3 0 00-1.2-.8zm-26.2 176.8c1.9 8.7 4.1 17.7 6.7 27a103.8 103.8 0 01-11.9 23.3 1.3 1.3 0 102.3 1.5 106.2 106.2 0 0010.9-20.4c2.5 8.5 5.3 17.3 8.4 26.3a145 145 0 01-36.4 42.2c-6-33.2-2.6-67 20-100z\"/>\n\t\t<foreignobject class=\"node\" width=\"300\" height=\"150\" x=\"102\" y=\"150\">\n\t\t\t${screen}\n\t\t</foreignobject>\n\t\t<foreignobject class=\"node\" width=\"40\" height=\"40\" x=\"82\" y=\"2\">\n\t\t\t${topLeftLed}\n\t\t</foreignobject>\n\t\t<foreignobject class=\"node\" width=\"40\" height=\"40\" x=\"382\" y=\"2\">\n\t\t\t${topRightLed}\n\t\t</foreignobject>\n\t\t<foreignobject class=\"node\" width=\"40\" height=\"40\" x=\"82\" y=\"402\">\n\t\t\t${bottomLeftLed}\n\t\t</foreignobject>\n\t\t<foreignobject class=\"node\" width=\"40\" height=\"40\" x=\"382\" y=\"402\">\n\t\t\t${bottomRightLed}\n\t\t</foreignobject>\n\t\t<foreignobject class=\"node\" width=\"40\" height=\"80\" x=\"462\" y=\"280\">\n\t\t\t${vibrationMotor}\n\t\t</foreignobject>\n\t</svg>\n`\n","import { LitElement, html, css, property } from 'lit-element'\nimport { connect, Card10, supported } from './bluetooth'\nimport { InputEvent, hexToRgb } from './utils'\nimport { card10Face } from './face'\n\nclass MyApp extends LitElement {\n\t@property({ type: String })\n\terror = ''\n\n\t@property({ attribute: false })\n\tcard: Card10 | null\n\n\tstatic get styles() {\n\t\treturn css`\n\t\t\t* {\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\t\t\tsvg {\n\t\t\t\tcolor: #888;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\tsvg button,\n\t\t\tsvg input {\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tfont: inherit;\n\t\t\t}\n\t\t\tbutton.connect {\n\t\t\t\tfont-size: 2em;\n\t\t\t}\n\t\t\t.rotate {\n\t\t\t\tdisplay: block;\n\t\t\t\ttransform: rotate(-90deg) translate(-50%);\n\t\t\t}\n\t\t\tlabel.hidden {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 0;\n\t\t\t\theight: 0;\n\t\t\t}\n\t\t`\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t${this.error\n\t\t\t\t? html`\n\t\t\t\t\t\t<div class=\"error\">${this.error}</div>\n\t\t\t\t  `\n\t\t\t\t: ''}\n\t\t\t${!this.card\n\t\t\t\t? card10Face({\n\t\t\t\t\t\tscreen: html`\n\t\t\t\t\t\t\t<button class=\"connect\" @click=${this.connect}>\n\t\t\t\t\t\t\t\tconnect\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t`,\n\t\t\t\t  })\n\t\t\t\t: card10Face({\n\t\t\t\t\t\tscreen: html`\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t@click=${() => {\n\t\t\t\t\t\t\t\t\tthis.card?.clock.now()\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSet current time\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t`,\n\t\t\t\t\t\ttopLeftLed: html`\n\t\t\t\t\t\t\t<label class=\"hidden\" for=\"topLeftLed\">\n\t\t\t\t\t\t\t\tset top left led color\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"topLeftLed\"\n\t\t\t\t\t\t\t\ttype=\"color\"\n\t\t\t\t\t\t\t\t@input=${async (e: InputEvent) => {\n\t\t\t\t\t\t\t\t\tif (e.target) {\n\t\t\t\t\t\t\t\t\t\tconst c = hexToRgb(e.target.value)\n\t\t\t\t\t\t\t\t\t\tawait this.card?.topLeftLed.write(c)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t`,\n\t\t\t\t\t\ttopRightLed: html`\n\t\t\t\t\t\t\t<label class=\"hidden\" for=\"topRightLed\">\n\t\t\t\t\t\t\t\tset top right led color\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"topRightLed\"\n\t\t\t\t\t\t\t\ttype=\"color\"\n\t\t\t\t\t\t\t\t@input=${async (e: InputEvent) => {\n\t\t\t\t\t\t\t\t\tif (e.target) {\n\t\t\t\t\t\t\t\t\t\tconst c = hexToRgb(e.target.value)\n\t\t\t\t\t\t\t\t\t\tawait this.card?.topRightLed.write(c)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tbottomLeftLed: html`\n\t\t\t\t\t\t\t<label class=\"hidden\" for=\"bottomLeftLed\">\n\t\t\t\t\t\t\t\tset bottom left led color\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"bottomLeftLed\"\n\t\t\t\t\t\t\t\ttype=\"color\"\n\t\t\t\t\t\t\t\t@input=${async (e: InputEvent) => {\n\t\t\t\t\t\t\t\t\tif (e.target) {\n\t\t\t\t\t\t\t\t\t\tconst c = hexToRgb(e.target.value)\n\t\t\t\t\t\t\t\t\t\tawait this.card?.bottomLeftLed.write(c)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tbottomRightLed: html`\n\t\t\t\t\t\t\t<label class=\"hidden\" for=\"bottomRightLed\">\n\t\t\t\t\t\t\t\tset bottom right led color\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"bottomRightLed\"\n\t\t\t\t\t\t\t\ttype=\"color\"\n\t\t\t\t\t\t\t\t@input=${async (e: InputEvent) => {\n\t\t\t\t\t\t\t\t\tif (e.target) {\n\t\t\t\t\t\t\t\t\t\tconst c = hexToRgb(e.target.value)\n\t\t\t\t\t\t\t\t\t\tawait this.card?.bottomRightLed.write(c)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tvibrationMotor: html`\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t@click=${() => {\n\t\t\t\t\t\t\t\t\tthis.card?.vibrate(1000)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span class=\"rotate\">vibrate</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t`,\n\t\t\t\t  })}\n\t\t`\n\t}\n\n\tasync connect() {\n\t\ttry {\n\t\t\tthis.clearError()\n\t\t\tthis.card = await connect(() => (this.card = null))\n\t\t} catch (e) {\n\t\t\tthis.error = e\n\t\t}\n\t}\n\n\tclearError() {\n\t\tthis.error = ''\n\t}\n}\n\nif (supported) {\n\tcustomElements.define('my-app', MyApp)\n}\n"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","SVGTemplateResult","super","getTemplateElement","svgElement","firstChild","isPrimitive","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","join","svg","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","standardProperty","kind","descriptor","placement","initializer","clazz","assign","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","appendInto","litRender","delete","rgbCharacteristic","service","uuid","char","read","getCharacteristic","readValue","red","getUint8","green","blue","write","Uint8Array","writeValue","numberCharacteristic","time","Uint16Array","timeCharacteristic","now","hexTime","Date","getTimezoneOffset","toString","sourceI","targetI","parseInt","currentTimeAsBigEndian","serviceUUID","Card10","supported","navigator","bluetooth","hexToRgb","hex","card10Face","screen","topLeftLed","topRightLed","bottomLeftLed","bottomRightLed","vibrationMotor","MyApp","error","card","clock","vibrate","connect","clearError","onDisconnect","log","device","requestDevice","filters","services","namePrefix","optionalServices","gatt","server","getPrimaryService","card10","define"],"mappings":"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"}